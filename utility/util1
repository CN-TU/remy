#!/usr/bin/perl -w

# parameters
my @lengths = ( 6, 6 );
my $capacity = 2;
my @initial_allocation = ( .00000001, 1 );
my $stepsize = 0.001;

# set up loop
my $time = 0;
my @lengths_remaining = @lengths;
my @completion_times = ( 0, 0 );

sub sum {
  my $sum = 0;
  for ( @_ ) { $sum += $_; }
  return $sum;
}

sub normalize {
  my $sum = sum( @_ );
  return map { $_ / $sum } @_;
}

while ( 1 ) {
  $time += $stepsize;

  my $capacity_this_step = $capacity * $stepsize;

  # make allocations
  my @allocations = @initial_allocation;
  for ( my $i = 0; $i < scalar @allocations; $i++ ) {
    if ( $lengths_remaining[ $i ] <= 0 ) {
      $allocations[ $i ] = 0;
    }
  }

  if ( (sum @allocations) == 0 ) {
    last;
  }

  @allocations = normalize @allocations;

#  printf "%.4f ", $time;
#  print "@allocations\n";

  for ( my $i = 0; $i < scalar @allocations; $i++ ) {
    # deliver packets
    next if $allocations[ $i ] == 0;
    $lengths_remaining[ $i ] -= $capacity_this_step * $allocations[ $i ];
    if ( $lengths_remaining[ $i ] > 0 ) {
      $completion_times[ $i ] = $time;
    }
  }

#      print "completion times: ", join " ", map { sprintf "%.2f", $_ } @completion_times;
#      print "\n";

  my @utility;
  for ( my $i = 0; $i < scalar @lengths; $i++ ) {
      $utility[ $i ] = ( $lengths[ $i ] - $lengths_remaining[ $i ] ) / $completion_times[ $i ];
#      $utility[ $i ] = - $completion_times[ $i ] / ( $lengths[ $i ] - $lengths_remaining[ $i ] );
  }

  printf "%.4f utilities: ", $time;
  print join " ", map { sprintf "%.2f", $_ } @utility;
  print " ";

  printf "(total utility: %.3f)\n", sum( @utility );
}

